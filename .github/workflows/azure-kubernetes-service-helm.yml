name: Build and deploy an app to AKS with Helm
"on":
    push:
        branches:
            - main
    workflow_dispatch: null
env:
    LOCATION: eastus
    CHART_PATH: ./charts
    CONTAINER_NAME: draftsample
    AZURE_CONTAINER_REGISTRY: ''
    RESOURCE_GROUP: myResourceGroup1
    IMAGE_PULL_SECRET_NAME: mydraftacrsecret
    CHART_OVERRIDE_PATH: ./charts/production.yaml
jobs:
    iac:
        permissions:
            contents: read
            id-token: write
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - name: Azure login
              uses: azure/login@v1.4.3
              with:
                client-id: ${{ secrets.AZURE_CLIENT_ID }}
                tenant-id: ${{ secrets.AZURE_TENANT_ID }}
                subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
            - name: Deploy infrastructure 
              id: deploy
              shell: pwsh
              run: |
                $deployment = $(az deployment sub create --name ${{ env.RESOURCE_GROUP }} `
                  --location ${{ env.LOCATION }} `
                  --template-file ./main.bicep `
                  --parameters location=${{ env.LOCATION }} `
                  --parameters rgName=${{ env.RESOURCE_GROUP }} `
                  --output json) | ConvertFrom-Json

                $aksName = $deployment.properties.outputs.aksName.value
                $acrName = $deployment.properties.outputs.acrName.value

                Write-Host "::set-output name=acrName::$acrName"
                Write-Host "::set-output name=aksName::$aksName"
        outputs:
          acrName: ${{ steps.deploy.outputs.acrName }}
          aksName: ${{ steps.deploy.outputs.aksName }}
          
    buildImage:
        permissions:
            contents: read
            id-token: write
        runs-on: ubuntu-latest
        needs:
            - iac
        steps:
            - uses: actions/checkout@v3
            - name: Azure login
              uses: azure/login@v1.4.3
              with:
                client-id: ${{ secrets.AZURE_CLIENT_ID }}
                tenant-id: ${{ secrets.AZURE_TENANT_ID }}
                subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
            - name: Build and push image to ACR
              run: |
                az acr build --image ${{needs.iac.outputs.acrName}}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }} --registry ${{needs.iac.outputs.acrName}} -g ${{ env.RESOURCE_GROUP }} .
    createSecret:
        permissions:
            contents: read
            id-token: write
        runs-on: ubuntu-latest
        needs:
            - iac
        steps:
            - name: Azure login
              uses: azure/login@v1.4.3
              with:
                client-id: ${{ secrets.AZURE_CLIENT_ID }}
                subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
                tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            - name: Get K8s context
              uses: azure/aks-set-context@v2.0
              with:
                cluster-name: ${{ needs.iac.outputs.aksName }}
                resource-group: ${{ env.RESOURCE_GROUP }}
            - id: get-acr-creds
              name: Get ACR credentials
              run: |
                az acr update -n ${{needs.iac.outputs.acrName}} -g ${{ env.RESOURCE_GROUP }} --admin-enabled true
                ACR_USERNAME=$(az acr credential show -g ${{ env.RESOURCE_GROUP }} -n ${{needs.iac.outputs.acrName}} --query username -o tsv)
                ACR_PASSWORD=$(az acr credential show -g ${{ env.RESOURCE_GROUP }} -n ${{needs.iac.outputs.acrName}} --query passwords[0].value -o tsv)
                echo "::add-mask::${ACR_USERNAME}"
                echo "::set-output name=username::${ACR_USERNAME}"
                echo "::add-mask::${ACR_PASSWORD}"
                echo "::set-output name=password::${ACR_PASSWORD}"
            - name: Create K8s secret for pulling image from ACR
              uses: Azure/k8s-create-secret@v1.1
              with:
                container-registry-password: ${{ steps.get-acr-creds.outputs.password }}
                container-registry-url: ${{needs.iac.outputs.acrName}}.azurecr.io
                container-registry-username: ${{ steps.get-acr-creds.outputs.username }}
                secret-name: ${{ env.IMAGE_PULL_SECRET_NAME }}
    deploy:
        permissions:
            actions: read
            contents: read
            id-token: write
        runs-on: ubuntu-latest
        needs:
            - iac
            - buildImage
            - createSecret
        steps:
            - uses: actions/checkout@v3
            - name: Azure login
              uses: azure/login@v1.4.3
              with:
                client-id: ${{ secrets.AZURE_CLIENT_ID }}
                subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
                tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            - name: Get K8s context
              uses: azure/aks-set-context@v2.0
              with:
                cluster-name: ${{ needs.iac.outputs.aksName }}
                resource-group: ${{ env.RESOURCE_GROUP }}
            - id: bake
              name: Bake deployment
              uses: azure/k8s-bake@v2.1
              with:
                helm-version: latest
                helmChart: ${{ env.CHART_PATH }}
                overrideFiles: ${{ env.CHART_OVERRIDE_PATH }}
                overrides: |
                    replicas:2
                renderEngine: helm
            - name: Deploy application
              uses: Azure/k8s-deploy@v3.1
              with:
                action: deploy
                imagepullsecrets: ${{ env.IMAGE_PULL_SECRET_NAME }}
                images: |
                    ${{needs.iac.outputs.acrName}}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }}
                manifests: ${{ steps.bake.outputs.manifestsBundle }}
